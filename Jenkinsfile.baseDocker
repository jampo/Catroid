#!groovy

pipeline {
    agent {
        label 'LimitedEmulator'
    }

    environment {
        BUILD_ARGS = '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) --build-arg KVM_GROUP_ID=$(getent group kvm | cut -d: -f3)'
        DOCKERFILE = 'Dockerfile.jenkins'
        DOCKER_DIR = 'docker'
        DOCKER_REPO = "catrobat"
    }

    parameters {
        booleanParam name: 'TAG_STABLE', defaultValue: false, description: 'When selected image will be tagged stable'
        booleanParam name: 'TAG_LATEST', defaultValue: true, description: 'When selected image will be tagget latest'
        string name: 'IMAGE_NAME', defaultValue: 'catrobat-android', description: 'Name for docker image to build '
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '30'))
    }

    stages {
        stage('Build docker image') {
            steps {
                // Build docker image
                // Use --pull to force pull base docker image
                sh 'echo "docker build --pull -t ${IMAGE_NAME} $BUILD_ARGS -f $DOCKER_DIR/$DOCKERFILE $DOCKER_DIR"'
            }
        }

        stage('Tag docker image') {
            steps {
                // Tag image with Year and Week number
                sh 'echo "docker tag ${IMAGE_NAME} $DOCKER_REPO/${IMAGE_NAME}:$(date +%Y-%V)"'

                // Tag image with Year Week number and day of week
                sh 'echo "docker tag ${IMAGE_NAME} $DOCKER_REPO/${IMAGE_NAME}:$(date +%Y-%V-%u)"'

                script {
                    if (env.TAG_STABLE?.toBoolean()){
                        sh 'echo "docker tag ${IMAGE_NAME} $DOCKER_REPO/${IMAGE_NAME}:stable"'
                    }

                    if (env.TAG_LATEST?.toBoolean()){
                        sh 'echo "docker tag ${IMAGE_NAME} $DOCKER_REPO/${IMAGE_NAME}:latest"'
                    }
                }
            }
        }

        stage('Push docker image') {
            steps {
                // Push image to dockerhub use credentials
                withCredentials([usernamePassword(credentialsId: 'catrobat-dockerhub', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    sh 'docker login -u $USERNAME -p $PASSWORD'
                }
                sh 'echo "docker push DOCKER_REPO/${IMAGE_NAME}"'
                sh 'docker logout'
            }
        }
    }

    post {
        changed {
            node('master') {
                notifyChat()
            }
        }
    }
}
